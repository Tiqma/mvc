{% extends "base.html.twig" %}

{% block title %}Intro{% endblock %}

{% block body %}
    <h1>Intro</h1>
    <p><a href="#kmom01">Länk till Kmom01</a></p>
    <p><a href="#kmom02">Länk till Kmom02</a></p>
    <p><a href="#kmom03">Länk till Kmom03</a></p>
    <p><a href="#kmom04">Länk till Kmom04</a></p>
    <p><a href="#kmom05">Länk till Kmom05</a></p>
    <p><a href="#kmom06">Länk till Kmom06</a></p>
    <article class="article">

    <header>
    <h1>Redovisning av kursmoment i kursen MVC</h1>
    </header>

    <section id="kmom01">
    {% apply markdown_to_html %}
    # Kmom01
    
    Min förkunskaper för objektorienterad programmering kommer från de två tidigare kurser jag läst,
    oopython och databas.

    PHPs modell är lik både python och javascript. Man skapar sin klass med class och gör funktioner 
    inuti den.

    Jag uppfattar kodningen som smidig med symfony och allt är ganska likt både express och liknande.

    Jag vill lära mig från artikeln att kunna optimera användningen av symfony eller liknande ramverk och att
    kunna skriva säker och fin kod.

    Lärt mig mer om php objektorienterad programmering och symfony.

    {% endapply %}
    </section>

    <section id="kmom02">
    {% apply markdown_to_html %}
    # Kmom02
    Arv är att en klass kan ärva från en basklass och få ut samma funktioner, vilket man gör med kommandot extend.
    Komposition betyder att en klass kan ha andra klasser inuti sig själv. En datorklass har ett grafikkortklass
    tex.
    Ett interface är en mall för vad en klass ska göra, men klassen får inte reda på hur det går till. klassen
    gör vad som blir tillsagt.
    Traits är återanvändbara koder som kan läggas till i klasser, utifall man kommer behöva återanvända kod.

    Jag löste uppgiften genom att först göra de övningar och kollade på föreläsningarna. Men det blev mycket nytt
    utföra i uppgiften som jag inte riktigt kunde överföra från övningarna. Så jag fick ta hjälp av internet
    för att utföra uppgiften och förstå hur jag skulle gå tillväga. Jag löste uppgiften genom att på simplaste 
    sätt visa upp mina kort med stringar. Kan inte säga att jag är helt nöjd, och om jag hade mer tid hade jag 
    visat mina kort med graphic.

    Mina reflektioner runtom symfony är att det har varit krångligt som vanligt att greppa den nya kodstilen. 
    Men mycket känner jag igen utifrån oopython och databas kursen. Kan vara ett viktigt verktyg att lära sig.

    TIL hur man symfony ramverk fungerar och dess klasser och implementeringar.
    {% endapply %}
    </section>

    <section id="kmom03">
    {% apply markdown_to_html %}
    # Kmom03

    Det kändes bra att börja med att modellera kortspelet med flödesdiagram och psuedokod. Det hjälpte till att
    få en klar bild till vad jag borde tänka på först vid programmeringen. Det gav en klar bild. Kan vara ett 
    bra tillvägagångssätt i framtiden.

    Jag löste uppgiften med att först skapa min Klass "Player", där spelaren kan använda funktionen "hit" för 
    att dra ett nytt kort. getHand för att hämta hela handen och getTotalPoints för att få totala poängen. 
    Och lite andra funktioner för funktionalitet för spelet. Player klassen har väl både Game och Player klass 
    tillsammans.

    Efter det införde jag "Bank" klassen som ärver från Player och jag införde en automatiserad player i stort
    sätt i den klassen. Banken drar kort tills den har över 17 poäng.

    Efter det var det bara till att få allt att fungera i routen, och när jag var klar och fixade mina errors
    från linten fick jag införa en ny klass, "Winner" för att undvika Else error.

    Jag känner mig ganska nöjd med min applikation då det inte är alltför mycket kod i routen.

    Min känsla för symfony är positiv, det kan vara lite klurigt ibland men jag vänjer mig mer och mer.

    TIL hur man skriver finare kod i php och lärt mig mer om klasser.
    {% endapply %}
    </section>

    <section id="kmom04">
    {% apply markdown_to_html %}
    Jag hade lite erfarenhet av enhetstestning från min kurs i objektorienterad programmering med Python, 
    så det var inte alltför svårt att greppa konceptet. Det kändes smidigt och enkelt att arbeta med 
    enhetstester, och med hjälp av PHPUnit kunde jag enkelt få en översikt över vad som behövde testas 
    i koden. Det var verkligen ett användbart verktyg.

    När det gäller min Game-klass lyckades jag uppnå över 90 % täckning med mina enhetstester, 
    vilket var mycket tillfredsställande. Jag gjorde också en del tester för min Card-klass, 
    men nådde bara upp till 70 % täckning där. Det var lite utmanande att testa sessionsfunktionerna, 
    så jag valde att inte fortsätta med det.

    Jag upplevde att min kod var ganska lätt att testa. Dock är jag osäker på om det finns en metod 
    för att generera fasta slumpmässiga nummer eller strängar på samma sätt som i Python. Därför är jag inte
     helt säker på om mina tester för de olika spelarnas kort var helt korrekta med de statiska strängar 
     jag använde för att simulera korten. Om det finns en bättre metod för att hantera detta skulle det 
     vara bra att implementera den.

    Jag valde att inte göra några ändringar i min kod efter att ha genomfört enhetstestningen.

    Testbar kod är definitivt ett kännetecken på välskriven kod eftersom det inte bara hjälper 
    till att säkerställa att koden fungerar korrekt, utan också sätter en standard för hur koden 
    ska utföras om fler personer involveras i utvecklingen av projektet. Det ser till att 
    förståelse och underhållbarhet håller bra standard.

    TIL hur man enhetstestar i PHP och de olika program som används till det tex PHPUnit och doc.
    
    
    {% endapply %}
    </section>

    <section id="kmom05"> <!-- Lägg till id-attributet -->
    {% apply markdown_to_html %}
    # Kmom05
    
    Markdown-innehåll för Kmom05.
    {% endapply %}
    </section>

    <section id="kmom06"> <!-- Lägg till id-attributet -->
    {% apply markdown_to_html %}
    # Kmom06
    
    Markdown-innehåll för Kmom06.
    {% endapply %}
    </section>

    </article>

    <section>
    <h2>Kmom07-10</h2>
    <p>Här är redovisningstexten</p>
    </section>


    </article>

{% endblock %}